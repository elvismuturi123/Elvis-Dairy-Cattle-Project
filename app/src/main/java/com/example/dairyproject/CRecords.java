package com.example.dairyproject;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.app.DatePickerDialog;
import android.content.ContentResolver;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.text.InputType;
import android.util.Log;
import android.view.View;
import android.webkit.MimeTypeMap;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;

import android.widget.Spinner;
import android.widget.TextView;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.storage.FirebaseStorage;

import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.squareup.picasso.Picasso;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;


public class CRecords extends AppCompatActivity {
    private static final int PICK_IMAGE_REQUEST = 1;
    private Button mButtonChooseImage;
    private Button mButtonUpload;
    private TextView mTextViewShowUploads;
    private EditText mEditTextFileName;
    private ImageView mImageView;

    private Uri mImageUri;
    StorageReference mStorageRef;
    private DatabaseReference mDatabaseRef2;
    TextView textView;
    // EditText cowBirthDate;
    DatePickerDialog.OnDateSetListener listener;
    EditText cowName;
    EditText tagNumber;
    EditText breed;
    EditText Weight;
    EditText dateOfBirth;
    EditText short_notes;
    Button Save_data;
    String cowID = " ";
    DatabaseReference cattleDbRef;
    String Image_Url = " ";

    Spinner cowCategorySpinner;
    ArrayAdapter CowCategoryArrayAdapter;

    String cowCategory = " ";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_crecords);


        //cowBirthDate = findViewById(R.id.birth_date);

        cowName = findViewById(R.id.cname);
        tagNumber = findViewById(R.id.ctagnumber);
        breed = findViewById(R.id.breed_id);
        Weight = findViewById(R.id.cWeight);
        dateOfBirth = findViewById(R.id.birth_date);
        short_notes = findViewById(R.id.notes_id);
        Save_data = findViewById(R.id.save_button);

        mButtonChooseImage = findViewById(R.id.button_uploadImage);


        mImageView = findViewById(R.id.Image);

        cowCategorySpinner = findViewById(R.id.cowCategorySpinner);


        mStorageRef = FirebaseStorage.getInstance().getReference().child("Cattle_Images");
        mDatabaseRef2 = FirebaseDatabase.getInstance().getReference("cattle_details");

        setUpCategorySpinner();

        mButtonChooseImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openFileChooser();
            }
        });


//        mButtonUpload.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//
//            }
//        });
//        mTextViewShowUploads.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//
//            }
//        });


        cattleDbRef = FirebaseDatabase.getInstance().getReference("cattle_details");

        Save_data.setOnClickListener(v -> {

            DatabaseReference new_cow_record = cattleDbRef.push();
            String autoGeneratedId = new_cow_record.getKey();

            cowID = autoGeneratedId;
            String cattle_Name = cowName.getText().toString();
            String tagNo = tagNumber.getText().toString();
            String cow_Breed = breed.getText().toString();
            String cattle_Weight = Weight.getText().toString();
            String DateOfBirth = dateOfBirth.getText().toString();
            String SNotes = short_notes.getText().toString().trim();

            String mImageUrl = Image_Url;

            Cows new_cow = new Cows(cowID, cattle_Name, cowCategory, tagNo, cow_Breed, cattle_Weight, DateOfBirth, SNotes, Image_Url);
            new_cow_record.setValue(new_cow, new DatabaseReference.CompletionListener() {
                @Override
                public void onComplete(@Nullable DatabaseError error, @NonNull DatabaseReference ref) {

                    if (error != null) {
                        Toolbox.showToast(getApplicationContext(), error.getMessage());
                    } else {
                        // data was saved
                        Toolbox.showToast(CRecords.this, "Data saved successfully !!!!");

                        //upload the image
                        uploadFile();

                    }
                }
            });
            finish();
        });
        tagNumber.setInputType(InputType.TYPE_CLASS_NUMBER);
        Weight.setInputType(InputType.TYPE_CLASS_NUMBER);


//------------------Date Picker----------------------

        Calendar calendar = Calendar.getInstance();
        final int year = calendar.get(Calendar.YEAR);
        final int month = calendar.get(Calendar.MONTH);
        final int day = calendar.get(Calendar.DAY_OF_MONTH);
        dateOfBirth.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                DatePickerDialog datePickerDialog = new DatePickerDialog(CRecords.this, android.R.style.Theme_Holo_Light_Dialog_MinWidth, (DatePickerDialog.OnDateSetListener) listener, year, month, day);
                datePickerDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLUE));
                datePickerDialog.show();
            }
        });
        listener = new DatePickerDialog.OnDateSetListener() {
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                month = month + 1;
                String date = dayOfMonth + "/" + month + "/" + year;
                dateOfBirth.setText(date);
            }
        };

    }


// SETS UP CATEGORIES IN THE SPINNER

    private void setUpCategorySpinner() {
        //set up the spinner
        String[] cow_categories_array = new String[6]; // Create an array
        String dairy = "Dairy Cow";
        String bulls = "Bull";
        String heifers = "Heifer";
        String steers = "Steer";
        String weaners = "Weaner";
        String calves = "Calf";

        cow_categories_array[0] = dairy;
        cow_categories_array[1] = bulls;
        cow_categories_array[2] = heifers;
        cow_categories_array[3] = steers;
        cow_categories_array[4] = weaners;
        cow_categories_array[5] = calves;

        // Create an stringCurrencyArrayAdapter for the spinner
        CowCategoryArrayAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, cow_categories_array);
        CowCategoryArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        cowCategorySpinner.setAdapter(CowCategoryArrayAdapter);
        // Handle spinner item selection (optional)
        cowCategorySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                cowCategory = cow_categories_array[position];

                Toolbox.showToast(getApplicationContext(), "Selected Category is: " + cowCategory);
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                // Handle when no item is selected
            }
        });


    } //sets up the currency spinner with currencies


// Upload button Logic

    private String getFileExtension(Uri uri) {
        ContentResolver contentResolver = getContentResolver();
        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();
        return mimeTypeMap.getExtensionFromMimeType(contentResolver.getType(uri));
    }

    private void uploadFile() {
        //user selected an image
        StorageReference fileReference = mStorageRef.child(System.currentTimeMillis() + " . " + getFileExtension(mImageUri));

        fileReference.putFile(mImageUri)
                .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {

                    @Override
                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                        //upload succesfull
                        Toolbox.showToast(CRecords.this, "Successful!!!");

                        //get download url
                        taskSnapshot.getStorage().getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                            @Override
                            public void onSuccess(Uri uri) {

                                Image_Url = uri.toString();

//                                    Toolbox.showToast(getApplicationContext(), "The url is " + Image_Url);

                                updateCowImage(Image_Url);

                            }
                        });


                        //Cows myNewCow = new Cows(mEditTextFileName.getText().toString().trim(), taskSnapshot.getDownloadUrl().toString());
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Toolbox.showToast(CRecords.this, e.getMessage());

                    }
                });
    }

    // Update cow image
    public void updateCowImage(String url) {
        //mImageUrl
        Map<String, Object> updateImageUrl = new HashMap<>();
        updateImageUrl.put("mImageUrl", url);

        cattleDbRef.child(cowID)
                .updateChildren(updateImageUrl)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        // Update successful
//                        Toolbox.showToast(getApplicationContext(), "Update url successful!!!");
                        Toolbox.navigateTo(getApplicationContext(), Display_cattle.class);
                        finish();
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        // Update failed
                        Toolbox.showToast(getApplicationContext(), e.getMessage());

//                       Log.w("TAG", "Error updating record", e);
                    }
                });
    }


    // IMAGE SELECTION CONTINUATION
    private void openFileChooser() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(intent, PICK_IMAGE_REQUEST);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {
            mImageUri = data.getData();
            Picasso.with(this).load(mImageUri).into(mImageView);
            mImageView.setImageURI(mImageUri);
        }
    }
}